max(data$num)
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list(day)]
tmp
tmp = tmp[c(2,3,4,7,5,6,1),]
tmp
year(data[1,1])
year(as.Date(data[1,1]))
data[1,1]
as.Date(data[1,]$data)
year(as.Date(data[1,]$data))
?as.Date
data[1,1]
data$day <- weekdays(as.Date(data$data), format = "%d/%m/%Y")
data$day <- weekdays(as.Date(data$data, format = "%d/%m/%Y"))
as.Date(data[1,]$data, format = "%d/%m/%Y")
year(as.Date(data[1,]$data, format = "%d/%m/%Y"))
library(data.table)
library(ggplot2)
data = fread('/home/alfonso/Documenti/calendar.csv')
data$day <- weekdays(as.Date(data$data, format = "%d/%m/%Y"))
healnum <- function(x){
x = gsub('\\.', '', x)
x = gsub(',', '.', x)
x = as.double(x)
return(x)
}
data$num <- healnum(data$num)
data$sum <- healnum(data$sum)
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list(day)]
tmp
?weekdays
library(data.table)
library(ggplot2)
data = fread('/home/alfonso/Documenti/calendar.csv')
data$day <- weekdays(as.Date(data$data, format = "%d/%m/%Y"))
healnum <- function(x){
x = gsub('\\.', '', x)
x = gsub(',', '.', x)
x = as.double(x)
return(x)
}
data$num <- healnum(data$num)
data$sum <- healnum(data$sum)
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list(day)]
tmp
library(data.table)
library(ggplot2)
data = fread('/home/alfonso/Documenti/calendar.csv')
data$day <- weekdays(as.Date(data$data, format = "%d/%m/%Y"))
healnum <- function(x){
x = gsub('\\.', '', x)
x = gsub(',', '.', x)
x = as.double(x)
return(x)
}
data$num <- healnum(data$num)
data$sum <- healnum(data$sum)
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list(day)]
tmp = tmp[c(3,4,5,6,7,1,2),]
tmp
library(data.table)
library(ggplot2)
data = fread('/home/alfonso/Documenti/calendar.csv')
data$day <- weekdays(as.Date(data$data, format = "%d/%m/%Y"))
healnum <- function(x){
x = gsub('\\.', '', x)
x = gsub(',', '.', x)
x = as.double(x)
return(x)
}
data$num <- healnum(data$num)
data$sum <- healnum(data$sum)
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list(day)]
tmp = tmp[c(3,4,5,6,7,1,2),]
print(tmp)
tmp$day <- c("Su", "M", "Tu", "W", "Th", "F", "Sa")
tmp
tmp$NUM.n <- tmp$NUM / sum(tmp$NUM)
tmp$SUM.n <- tmp$SUM / sum(tmp$SUM)
tmp
library(data.table)
library(ggplot2)
data = fread('/home/alfonso/Documenti/calendar.csv')
as.Date(data$data, format = "%d/%m/%Y")
data$day <- weekdays(data$data)
data$year <- year(data$data)
healnum <- function(x){
x = gsub('\\.', '', x)
x = gsub(',', '.', x)
x = as.double(x)
return(x)
}
data$num <- healnum(data$num)
data$sum <- healnum(data$sum)
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list(day, year)]
tmp = tmp[c(3,4,5,6,7,1,2),]
print(tmp)
tmp$day <- c("Su", "M", "Tu", "W", "Th", "F", "Sa")
tmp$NUM.n <- tmp$NUM / sum(tmp$NUM)
tmp$SUM.n <- tmp$SUM / sum(tmp$SUM)
library(data.table)
library(ggplot2)
data = fread('/home/alfonso/Documenti/calendar.csv')
data$data = as.Date(data$data, format = "%d/%m/%Y")
data$day <- weekdays(data$data)
data$year <- year(data$data)
healnum <- function(x){
x = gsub('\\.', '', x)
x = gsub(',', '.', x)
x = as.double(x)
return(x)
}
data$num <- healnum(data$num)
data$sum <- healnum(data$sum)
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list(day, year)]
tmp = tmp[c(3,4,5,6,7,1,2),]
print(tmp)
tmp$day <- c("Su", "M", "Tu", "W", "Th", "F", "Sa")
tmp$NUM.n <- tmp$NUM / sum(tmp$NUM)
tmp$SUM.n <- tmp$SUM / sum(tmp$SUM)
tmp
library(data.table)
library(ggplot2)
data = fread('/home/alfonso/Documenti/calendar.csv')
data$data = as.Date(data$data, format = "%d/%m/%Y")
data$day <- weekdays(data$data)
data$year <- year(data$data)
healnum <- function(x){
x = gsub('\\.', '', x)
x = gsub(',', '.', x)
x = as.double(x)
return(x)
}
daa
data
data$num <- healnum(data$num)
data$sum <- healnum(data$sum)
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list("day", "year")]
day
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list(data$day, data$year)]
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = c(day, year)]
head(data)
tmp = data[, .(NUM = sum(num), SUM = sum(sum)), by = list(day, year)]
tmp
tmp = tmp[c(3,4,5,6,7,1,2, 8, 9, 10, 11, 12, 13, 14),]
print(tmp)
tmp$day <- c("Su", "M", "Tu", "W", "Th", "F", "Sa", "Su", "M", "Tu", "W", "Th", "F", "Sa")
tmp$NUM.n <- tmp$NUM / sum(tmp$NUM)
tmp$SUM.n <- tmp$SUM / sum(tmp$SUM)
tmp
tmp2016 = tmp[year == "2016"]
tmp2017 = tmp[year == "2017"]
tmp2017
ggplot(tmp2016)+
geom_bar(aes(x = day, y = SUM.n), stat = 'identity')
tmp2016
install.packages('rjson')
getwd()
setwd("/var/www/html/FakeNewsAcademy/")
library(data.table)
library(igraph)
library(bit64)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
nodes[is.na(nodes)] <- 0
fwrite(nodes, 'assets/data/paper_centrality.csv')
nodes
nodes[is.na(nodes),] <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
library(data.table)
library(igraph)
library(bit64)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fwrite(nodes, 'assets/data/paper_centrality.csv')
nodes[nodes$betweenness < 0]
nodes[nodes$indegree < 0]
nodes[nodes$clustering < 0]
nodes[nodes$pagerank < 0]
library(data.table)
library(igraph)
library(bit64)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fwrite(nodes, 'assets/data/paper_centrality.csv')
library(data.table)
library(igraph)
library(bit64)
library(rjson)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fn <- fromJSON('assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, fn['paper_id'])
}
fn = data.table(paper_id = ids)
fwrite(nodes, 'assets/data/paper_centrality.csv')
library(data.table)
library(igraph)
library(bit64)
library(rjson)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, fn['paper_id'])
}
fn = data.table(paper_id = ids)
fwrite(nodes, 'assets/data/paper_centrality.csv')
nodes = unique(nodes)
?merge
nodes = merge(nodes, fn, by = 'paper_id', all.x = TRUE)
library(data.table)
library(igraph)
library(bit64)
library(rjson)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, as.character(fn['paper_id']))
}
fn = data.table(paper_id = ids)
nodes = merge(nodes, fn, by = 'paper_id', all.x = TRUE)
fwrite(nodes, 'assets/data/paper_centrality.csv')
library(data.table)
library(igraph)
library(bit64)
library(rjson)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, as.character(fn['paper_id']))
}
fn = data.table(paper_id = ids)
nodes = merge(nodes, fn, by = 'paper_id', all.x = TRUE)
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fwrite(nodes, 'assets/data/paper_centrality.csv')
library(data.table)
library(igraph)
library(bit64)
library(rjson)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, as.character(fn['paper_id']))
}
fn = data.table(paper_id = ids)
nodes = merge(fn, nodes, by = 'paper_id', all.x = TRUE)
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fwrite(nodes, 'assets/data/paper_centrality.csv')
library(data.table)
library(igraph)
library(bit64)
library(rjson)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, fn['paper_id'])
}
fn = data.table(paper_id = ids)
fn$paper_id <- as.character(fn$paper_id)
nodes = merge(fn, nodes, by = 'paper_id', all.x = TRUE)
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fwrite(nodes, 'assets/data/paper_centrality.csv')
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, fn['paper_id'])
}
fn = data.table(paper_id = ids)
fn <- fromJSON(file = 'assets/data/fake.json')
fn[1]
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, fn$paper_id)
}
fn = data.table(paper_id = ids)
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, f$paper_id)
}
f
library(data.table)
library(igraph)
library(bit64)
library(rjson)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, f$paper_id)
}
fn = data.table(paper_id = ids)
fn$paper_id <- as.character(fn$paper_id)
nodes = merge(fn, nodes, by = 'paper_id', all.x = TRUE)
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fwrite(nodes, 'assets/data/paper_centrality.csv')
library(data.table)
library(igraph)
library(bit64)
library(rjson)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, f$paper_id)
}
fn = data.table(paper_id = ids)
fn$paper_id <- as.character(fn$paper_id)
nodes = merge(fn, nodes, by = 'paper_id', all.x = TRUE)
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fwrite(nodes, 'assets/data/paper_centrality.csv')
library(data.table)
library(igraph)
library(bit64)
library(rjson)
refs = fread('assets/data/references.csv')
refs = unique(refs)
if("weight" %in% colnames(refs)){
refs[refs$weigh <= 0,]$weight = 0.000001
}
G = graph_from_data_frame(refs, directed = TRUE)
## Computing centralities for each node
nodes = data.table()
nodes$paper_id = V(G)$name
nodes$betweenness = betweenness(G)
nodes$indegree = degree(G, mode = "in")
nodes$clustering = transitivity(G, 'local')
nodes$pagerank = page_rank(G)$vector
fn <- fromJSON(file = 'assets/data/fake.json')
ids = c()
for(f in fn){
ids = c(ids, f$paper_id)
}
fn = data.table(paper_id = ids)
fn$paper_id <- as.character(fn$paper_id)
nodes = merge(fn, nodes, by = 'paper_id', all.x = TRUE)
nodes[is.na(nodes$betweenness),]$betweenness <- 0
nodes[is.na(nodes$indegree),]$indegree <- 0
nodes[is.na(nodes$clustering),]$clustering <- 0
nodes[is.na(nodes$pagerank),]$pagerank <- 0
fwrite(nodes, 'assets/data/paper_centrality.csv')
